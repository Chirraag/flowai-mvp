import { storage } from "../db/storage";
import { InsertPatientCommunication } from "@/db/schema";

export interface CommunicationTemplate {
  type: string;
  subject?: string;
  template: string;
  language: string;
}

export class CommunicationService {
  private templates: Map<string, CommunicationTemplate[]> = new Map();

  constructor() {
    this.initializeTemplates();
  }

  private initializeTemplates() {
    // Appointment confirmation templates
    this.templates.set("appointment_confirmation", [
      {
        type: "sms",
        template: "Hi {{patientName}}, your appointment with {{providerName}} is confirmed for {{date}} at {{time}}. Location: {{location}}. Check-in code: {{checkInCode}}",
        language: "en"
      },
      {
        type: "email",
        subject: "Appointment Confirmation - {{date}}",
        template: `Dear {{patientName}},

Your appointment has been confirmed with the following details:

Provider: {{providerName}}
Date: {{date}}
Time: {{time}}
Location: {{location}}
Reason: {{reasonForVisit}}

Check-in Information:
- Arrive 15 minutes early
- Use check-in code: {{checkInCode}}
- Bring your insurance card and ID

{{preAppointmentInstructions}}

If you need to reschedule or cancel, please call us at least 24 hours in advance.

Best regards,
{{clinicName}}`,
        language: "en"
      },
      {
        type: "sms",
        template: "Hola {{patientName}}, su cita con {{providerName}} está confirmada para {{date}} a las {{time}}. Ubicación: {{location}}. Código de check-in: {{checkInCode}}",
        language: "es"
      },
      {
        type: "sms", 
        template: "您好{{patientName}}，您与{{providerName}}的预约已确认，时间：{{date}} {{time}}。地点：{{location}}。签到码：{{checkInCode}}",
        language: "zh"
      }
    ]);

    // Appointment reminder templates
    this.templates.set("appointment_reminder", [
      {
        type: "sms",
        template: "Reminder: You have an appointment tomorrow with {{providerName}} at {{time}}. Location: {{location}}. Check-in code: {{checkInCode}}",
        language: "en"
      },
      {
        type: "sms",
        template: "Recordatorio: Tiene una cita mañana con {{providerName}} a las {{time}}. Ubicación: {{location}}. Código: {{checkInCode}}",
        language: "es"
      }
    ]);

    // Intake form templates
    this.templates.set("intake_instructions", [
      {
        type: "email",
        subject: "Pre-Visit Instructions - {{date}}",
        template: `Dear {{patientName}},

Please complete the following before your appointment on {{date}}:

{{intakeInstructions}}

{{preparationInstructions}}

If you have any questions, please don't hesitate to contact us.

Best regards,
{{clinicName}}`,
        language: "en"
      }
    ]);
  }

  async sendAppointmentConfirmation(appointmentId: number): Promise<void> {
    const appointment = await storage.getAppointment(appointmentId);
    if (!appointment) {
      throw new Error("Appointment not found");
    }

    const patient = await storage.getPatient(appointment.patientId);
    const provider = await storage.getProvider(appointment.providerId);
    
    if (!patient || !provider) {
      throw new Error("Patient or provider not found");
    }

    const language = patient.preferredLanguage || "en";
    const communicationType = patient.communicationPreference || "sms";

    const templates = this.templates.get("appointment_confirmation") || [];
    const template = templates.find(t => t.type === communicationType && t.language === language) ||
                    templates.find(t => t.type === communicationType && t.language === "en");

    if (!template) {
      throw new Error("Template not found");
    }

    const variables = {
      patientName: `${patient.firstName} ${patient.lastName}`,
      providerName: `Dr. ${provider.firstName} ${provider.lastName}`,
      date: this.formatDate(appointment.date),
      time: appointment.time,
      location: "Main Clinic", // This would come from provider/clinic data
      reasonForVisit: appointment.reasonForVisit || "",
      checkInCode: appointment.checkInCode || "",
      clinicName: "Flow AI Healthcare",
      preAppointmentInstructions: "" // This would be generated by AI agent
    };

    const content = this.replaceVariables(template.template, variables);
    
    await this.sendCommunication({
      patientId: patient.id,
      appointmentId: appointment.id,
      communicationType,
      messageType: "confirmation",
      content,
      language
    });

    // Update appointment confirmation status
    await storage.updateAppointment(appointmentId, {
      confirmationSent: true
    });
  }

  async sendAppointmentReminder(appointmentId: number): Promise<void> {
    const appointment = await storage.getAppointment(appointmentId);
    if (!appointment) return;

    const patient = await storage.getPatient(appointment.patientId);
    const provider = await storage.getProvider(appointment.providerId);
    
    if (!patient || !provider) return;

    const language = patient.preferredLanguage || "en";
    const templates = this.templates.get("appointment_reminder") || [];
    const template = templates.find(t => t.language === language) ||
                    templates.find(t => t.language === "en");

    if (!template) return;

    const variables = {
      patientName: `${patient.firstName} ${patient.lastName}`,
      providerName: `Dr. ${provider.firstName} ${provider.lastName}`,
      time: appointment.time,
      location: "Main Clinic",
      checkInCode: appointment.checkInCode || ""
    };

    const content = this.replaceVariables(template.template, variables);
    
    await this.sendCommunication({
      patientId: patient.id,
      appointmentId: appointment.id,
      communicationType: "sms",
      messageType: "reminder", 
      content,
      language
    });

    // Update appointment reminder status
    await storage.updateAppointment(appointmentId, {
      reminderSent: true
    });
  }

  async sendIntakeInstructions(patientId: number, appointmentId: number, instructions: any): Promise<void> {
    const patient = await storage.getPatient(patientId);
    const appointment = await storage.getAppointment(appointmentId);
    
    if (!patient || !appointment) return;

    const language = patient.preferredLanguage || "en";
    const templates = this.templates.get("intake_instructions") || [];
    const template = templates.find(t => t.language === language) ||
                    templates.find(t => t.language === "en");

    if (!template) return;

    const variables = {
      patientName: `${patient.firstName} ${patient.lastName}`,
      date: this.formatDate(appointment.date),
      intakeInstructions: this.formatInstructions(instructions.intakeInstructions),
      preparationInstructions: this.formatInstructions(instructions.preparationInstructions),
      clinicName: "Flow AI Healthcare"
    };

    const content = this.replaceVariables(template.template, variables);
    
    await this.sendCommunication({
      patientId: patient.id,
      appointmentId: appointment.id,
      communicationType: "email",
      messageType: "instruction",
      content,
      language
    });
  }

  private async sendCommunication(communicationData: InsertPatientCommunication): Promise<void> {
    try {
      // Create communication record
      const communication = await storage.createPatientCommunication(communicationData);
      
      // Simulate sending (in production, this would integrate with SMS/Email providers)
      if (communicationData.communicationType === "sms") {
        await this.sendSMS(communicationData);
      } else if (communicationData.communicationType === "email") {
        await this.sendEmail(communicationData);
      }

      // Update status to sent
      await storage.updatePatientCommunication(communication.id, {
        status: "sent",
        sentAt: new Date()
      });

      // Simulate delivery confirmation
      setTimeout(async () => {
        await storage.updatePatientCommunication(communication.id, {
          status: "delivered",
          deliveredAt: new Date()
        });
      }, 1000);

    } catch (error) {
      console.error("Communication failed:", error);
      // In production, would handle retries and error notifications
    }
  }

  private async sendSMS(communicationData: InsertPatientCommunication): Promise<void> {
    // This would integrate with SMS providers like Twilio
    console.log(`SMS sent to patient ${communicationData.patientId}: ${communicationData.content}`);
  }

  private async sendEmail(communicationData: InsertPatientCommunication): Promise<void> {
    // This would integrate with email providers like SendGrid
    console.log(`Email sent to patient ${communicationData.patientId}: ${communicationData.content}`);
  }

  private replaceVariables(template: string, variables: Record<string, string>): string {
    let result = template;
    Object.entries(variables).forEach(([key, value]) => {
      const regex = new RegExp(`{{${key}}}`, 'g');
      result = result.replace(regex, value || '');
    });
    return result;
  }

  private formatDate(dateString: string): string {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', { 
      weekday: 'long', 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
  }

  private formatInstructions(instructions: any): string {
    if (Array.isArray(instructions)) {
      return instructions.map(item => `• ${item}`).join('\n');
    }
    return instructions?.toString() || '';
  }

  // Schedule automatic reminders
  async scheduleReminders(): Promise<void> {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowString = tomorrow.toISOString().split('T')[0];

    const appointments = await storage.getAllAppointments();
    const tomorrowAppointments = appointments.filter(apt => 
      apt.date === tomorrowString && 
      apt.status === "scheduled" && 
      !apt.reminderSent
    );

    for (const appointment of tomorrowAppointments) {
      try {
        await this.sendAppointmentReminder(appointment.id);
      } catch (error) {
        console.error(`Failed to send reminder for appointment ${appointment.id}:`, error);
      }
    }
  }
}

export const communicationService = new CommunicationService();